{
  "hash": "9d86ba5d8bc9e459653d39b4dbea7caf",
  "result": {
    "markdown": "---\ntitle: \"Git, GitHub & Rstudio [DE]\"\n\n---\n\n```{=html}\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.6.1/mermaid.min.js\"></script>\n```\n\n<style>\nsvg[id^=\"mermaid-\"] { min-width: 50%; max-width: 100%; }\n</style>\n\n![](../images/github-Rstudio.jpg){width=\"100%\"}\n\n## Modulüberblick\n\nIn diesem Modul geht es um das Versionskontrollsystem `git`, den Cloud-Dienst `GitHub` und deren Verwendung in `RStudio`.\n\n`git` ist ein Versionskontrollsystem, das die Erstellung von Snapshots von Dateien oder ganzen Verzeichnisbäumen ermöglicht.\nAuch das Kombinieren und Vergleichen solcher Snapshots ist komfortabel möglich.\n\n`GitHub` ist die bekannteste Cloud-basierte Arbeitsumgebung auf Basis von `Git` und bietet darüber hinaus eine Vielzahl webbasierter Werkzeuge und Dienste.\n\n`RStudio` ist als so genannte integrierte Entwicklungsumgebung (IDE) eine Desktop-Anwendung, die nicht nur für R/Python generische Programmieruntersützung bietet, sondern auch das wissenschaftliche Schreiben und Dokumentation, von Daten und Texten sehr gut unterstützt- Durch die vollständige Integration von `Pandoc` und `Tex` bietet es darüber hinaus eine weitgehende und sehr komfortable Unterstützung bei der Erstellung von Dokumenten in Form von Texten in allen denkbaren Formaten, interaktiven Dokumenten und Websites.\n\n### Lernziele\n\nAm Ende des Moduls werdet ihr in der Lage sein, `git`, `GitHub` und `Rstudio` effizient zu verwenden.\nEin besonderer Schwerpunkt liegt dabei auf der praktischen Anwendung.\nKonkret beschäftigen wir uns mit:\n\n-   Was ist eine Versionskontrolle?\n-   Was unterscheidet `git` und `GitHub`?\n-   Die zentralen Vorgänge, `Pull`, `Status`, `Add`, `Commit`, `Push`\n-   Vermeidung und Auflösung von Versionskonflikten\n-   Nutzung mit `RStudio`\n\n## Git und GitHub leicht gemacht\n\n### Lernziele\n\nIn dem Teilmodul *Git und GitHub leicht gemacht* lernst du:\n\n-   das Konzept der Versionskontrolle\n-   die Einsatzgebiete von GitHub und Git\n\n### Vorkenntnisse\n\n-   mit deinem Dateimanager navigieren und arbeiten\n-   ein grundlegendes Verständnis von Datei- und Ordnerstrukturen\n\n### Überblick\n\nWas ist eine Versionskontrolle und wofür ist sie gut?\nVersionskontrollsysteme sind Softwaretools, die Personen bei der Verwaltung von Änderungen an Texten, Quellcode, wissenschaftlichen Analysen oder Dokumentationen unterstützen.\n\nIm Falle eines Fehlers können die Autor:innen die Änderungen einsehen und mit früheren (Teil-)Versionen vergleichen, um Korrekturen vorzunehmen und gleichzeitig die Unterbrechung ihrer eigenen Arbeit oder der Arbeit von Teammitgliedern zu minimieren.\n\nDu hast zum Beispiel einen Ordner, in dem du ein Projekt hast, das aus verschiedenen Dateien besteht (Text, Programmcode, Bilder, Sounddateien usw.), und du möchtest die Änderungen verfolgen, die du an diesen Dateien vorgenommen hast.\n\nDie Software `git` protokolliert alle Änderungen an diesen Dateien.\nWie geht das?\n\n1\\.\n`git` mitteilen, dass eine Datei oder ein Verzeichnis aufgezeichnet werden soll.\n\n2\\.\n`git` mitteilen, dass der Zustand der Datei zu einem bestimmten Zeitpunkt aufgezeichnet werden soll.\n\nDieser Prozess ist also in zwei Schritte unterteilt, die kontrolliert und ausgelöst werden müssen.\nUm definierte Änderungen vornehmen zu können, muss festgelegt werden, was überwacht werden soll und es muss explizit bestätigt werden, dass ein definierter Zustand gespeichert wird.\nIm Prinzip muss also, wie bekannt, eine Momentaufnahme der Datei oder des Projektes bestätigt gespeichert werden.\n\nDer große Unterschied ist jedoch, dass nur die Änderungen dieses Sicherungsvorganges aufgezeichnet werden und später auch in diesen Teilschritten wiederhergestellt werden können.\n\n#### Git - Erste Schritte\n\nBei der Verwendung von Git muss zunächst ein Repository *in* einem Verzeichnis auf dem lokalen Rechner aktiviert werden.\nDies geschieht mit dem Befehl `git init`.\nNun weiß Git wo, aber nicht was es verfolgen soll.\n\n\n```{mermaid}\n%%| fig-cap: Fig 1. Initialisierung eines Repositories\n\n\ngraph LR\n    A[Erzeuge einen <br> neuen Ordner ] -- mkdir MeinOrdner --> B[Lokaler Ordner <br> 'MeinOrdner']\n    B -- git init --> C[Lokales Repository <br> 'Mein Ordner']\n    C -.- D(git überwacht <br> 'MeinOrdner' <br> 'kennt' aber Inhalte)\n  \n\n    classDef gr fill:#9f6,stroke:#333,stroke-width:2px\n    classDef bl fill:#6BC9F5,stroke:#333,stroke-width:4px\n    classDef or fill:orange,stroke:#333,stroke-width:1px,stroke-dasharray: 3\n    class A bl\n    class B,C gr\n    class D or\n\n%%{init: {'theme':'forest'}}%%\n```\n\n\n\n\nDie Veränderungen an Dateien des Projekts werden jdoch **nur** übwerwach falls `git` ausdrücklich darüber  *\"informiert\"* wird, was mit diesen Dateien geschehen soll. Dies geschieht mit den beiden Befehlen `git add` und `git commit`. Der Befehl, `git push` wird dann verwendet wenn die bestätigten Verzeichnis-Snapshot in ein entferntes Repository (z.B. Github, GitLab) übertragenm werden sollen.\n\n\n```{mermaid}\n\n\ngraph LR\n    Z(Eine neue Datei wird erstellt)\n    \n    A[Lokales Verzeichnis ] -- git add 'Dateiname' --> B[Datei im <br>Staging Area]\n    B -- git commit --> C[Dateiversion im <br> Lokalen Repository ]\n    C -- git push --> D[Dateiversion im <br> Remote Repository ]\n    \n    AA[Leerer Ordner] -.-> BB(git überwacht die Datei)\n    BB -.-> CC>git sichert lokal <br> aktuellen Zustand der Datei]\n    CC -.-> DD>git sichert  remote <br> aktuellen Zustand der Datei]\n    \n    \n\n    classDef green fill:#9f6,stroke:#333,stroke-width:2px\n    classDef blue fill:#6BC9F5,stroke:#333,stroke-width:4px\n    classDef orange fill:orange,stroke:#333,stroke-width:1px,stroke-dasharray: 3\n    class A blue\n    class B,C,D green\n    class Z,DD,CC,AA,BB orange\n\n```\n\n\n\n\nDer letzte Befehl ist `git status`.\nDu solltest diesen Befehl benutzen, wenn du an deinem Projekt arbeitest, damit du weißt, was du noch nicht getrackt hast.\nDie Ausgabe dieses Befehls besteht aus mehreren Teilen Du solltest in der Lage sein, die Ausgabe dieses Befehls zu interpretieren:\n\n![](../images/64_git-status.PNG){width=\"65%\" height=\"65%\"}\n\n### Gut zu wissen\n\n::: {.successbox .ginfo}\nWenn du mehr über Git erfahren möchtest, findest du hier weitere hilfreiche Ressourcen:\n\n-   [Pro Git: Kapitel **Git Grundlagen**](https://git-scm.com/book/en/v2)\n-   [Happy Git mit R](https://happygitwithr.com/)\n:::\n\n## Git/GitHub: pull, status, add, commit, push\n\n### Lernziele\n\nIn dieser Lektion lernst du\n\n-   ein lokales Projektarchiv in einem Ordner anlegst\n-   Änderungen an einem entfernten Repository vornehmen\n-   ein lokales Repository zu verwalten\n\n### Voraussetzungen\n\n-   Einrichten eines [GitHub-Accounts](https://github.com/join)\n-   Herunterladen der [Git Bash](https://git-scm.com/downloads)\n\n### Einrichtung von git und GitHub\n\nEs gibt zwei typische Szenarien für die Einrichtung von Git und GitHub.\n\n1.  du hast das Projekt noch nicht gestartet und möchtest ein GitHub-Repository, das du als Vorlage auf deinen Rechner kopieren (klonen) und dann lokal mit Dateien und Verzeichnissen nach deinen Wünschen füllen kannst.\n2.  Du hast das Projekt bereits lokal gestartet und möchtest es auf GitHub kopieren.\n\nBeide Szenarien werden von Jenny Bryan exzellent erläutert:\n\n-   Szenario 1: Happy Git With R: Kapitel 15 [Neues Projekt GitHub](https://happygitwithr.com/new-github-first.html#new-github-first)\n-   Szenario 2: Happy Git With R: Kapitel 17 [Bestehendes Projekt, GitHub](https://happygitwithr.com/existing-github-last.html#existing-github-last)\n\n### Gut zu wissen\n\n::: {.successbox .ginfo}\n-   Du versuchst, `git commit` auszuführen, nachdem du Änderungen an einer Datei vorgenommen hast, aber du trackst diese Datei(en) nicht.\n    Deshalb müssen Sie zuerst `git add` ausführen.\n\n-   Du versuchst `git push` auszuführen, um Deine Aktualisierungen in das entfernte Repository zu übertragen, aber dieses existiert nicht.\n\n-   Du versuchst `git push` auszuführen, um deine Aktualisierungen in das entfernte Repository zu übertragen, obwohl es bereits neue Aktualisierungen im entfernten Repository gibt (z.B. von einem anderen Teammitglied), die du noch nicht in das lokale Projekt übertragen hast.\n    Die Fehlermeldung, die du bekommst, wird in etwa so aussehen:\n\n::: warning\nFehler: Deine lokalen Änderungen an den folgenden Dateien würden beim Zusammenführen überschrieben: ... Bitte übertrage oder speichere deine Änderungen vor dem Zusammenführen.\n:::\n:::\n\n### Selbst-Check\n\n::: {.infobox .test}\n[![](../images/git-0-self.png)](http://137.248.191.201:3838/de/git/#section-git-in-a-nutshell)\n:::\n\nDu weist also dein lokales `git` an, deine eigenen Änderungen hinzuzufügen, ohne die Änderungen deines Teamkollegen zu berücksichtigen - ein klassischer Loyalitätskonflikt.\nDer beste Weg, dieses Problem zu vermeiden, ist immer einen `git pull` durchzuführen, bevor man mit dem lokalen Editieren beginnt.\n\nFür ein besseres Verständnis lies die folgenden Texte:\n\n-   [Pull tricky](https://happygitwithr.com/pull-tricky.html).\n-   [Git Grundlagen](https://git-scm.com/book/en/v2)\n-   [Git und R](https://happygitwithr.com/)\n-   [Rstudio - git - GitHub](https://happygitwithr.com/rstudio-git-github.html)\n\n::::\n\n## Fork und Branches auf GitHub\n\n### Lernziele\n\nIn dieser Lektion lernst du\n\n-   Was ein Fork/Branch eines GitHub-Repositorys ist.\n-   Wie man einen Branch eines GitHub Repositories erstellt.\n-   Wie Du ein GitHub Repository von einem Branch aus aktualisierst.\n\n### Vorausetzungen\n\n-   Vertrautheit mit GitHub-Repositorys.\n-   Git muss auf deinem Computer installiert sein.\n-   Ein GitHub Konto!\n\n### Was ist ein Fork/Branch?\n\nWenn man in Gruppen an GitHub-Projekten arbeitet, wird es lästig, wenn eine Person den gesamten Code alleine in das Repository einpflegen muss.\nHier kommen Forks und Branches ins Spiel.\n- Mit Branches kannst Du eine Kopie des aktuellen GitHub-Projekts nehmen und auf Deinem eigenen Computer Änderungen vornehmen.\nSobald Du und Deine Gruppe Änderungen am Code vorgenommen habt, könnt Ihr die Änderungen wieder in Eure ursprüngliche Projektgruppe einfügen.\n- Branches können auch verwendet werden, wenn Du an einem Teil eines Projekts getrennt von den anderen Teilen arbeiten möchtest.\n- Forks sind sehr ähnlich, mit dem Unterschied, dass sie Kopien bzw Klone eines kompletten Projekts an einem anderen Ort sind.\n\n#### Wie erstelle ich einen Branch?\n\nUm einen Branch von einem GitHub Repository zu erstellen, gehe zu dem Hauptrepository, an dem du arbeiten möchtest und klicke auf das Dropdown-Menü, das \"main\" heißen sollte.\nEs sollte wie das folgende Bild aussehen.\n\n![](https://docs.github.com/assets/cb-78797/mw-1440/images/help/branches/branch-selection-dropdown.webp){width=\"50%\" height=\"50%\"}\n\nSobald man auf dieses Menü klickt, erscheint auf GitHub ein Textfeld mit der Aufschrift \"Find or create a branch...\", man gibt einen neuen Namen für den Zweig ein, z.B.\n'newbranch1'.\nDa dieser Zweig noch nicht existiert, fragt dich GitHub, ob du einen Zweig mit dem Namen \"newbranch1\" erstellen möchtest.\nKlicke auf \"Create branch: newbranch1\" und der neue Zweig wird für Dich erstellt, wie in der folgenden Abbildung zu sehen ist.\n\n![](https://docs.github.com/assets/cb-54840/mw-1440/images/help/branches/create-branch-text.webp){width=\"50%\" height=\"50%\"}\n\n#### Wie stellt man einen Pull Request?\n\nEine Pull-Anfrage ermöglicht es dem Eigentümer des GitHub-Projekts, Deine Änderungen zu überprüfen, um sicherzustellen, dass sie in das aktuelle Repository passen und keine Konflikte in Deinem Repository verursachen.\n\nUm eine Pull-Anfrage von Deinem Zweig aus zu stellen, musst Du zuerst eine Änderung an Deinem Zweig-Repository vornehmen.\nSobald Du eine Änderung an Deinem Zweig vorgenommen hast, erscheint ein gelber Balken auf Deinem Bildschirm, der Dich fragt, ob Du eine Pull-Anfrage stellen möchtest.\nWie Du auf dem Bild unten sehen kannst, gibt es einen grünen Button, und sobald Du darauf klickst, kannst Du eine Pull-Anfrage erstellen.\n\n![](https://uoftcoders.github.io/rcourse/image/git_lesson/yellow_prompt.png){width=\"50%\" height=\"50%\"}\n\nSobald Du auf den Button klickst, informiert Dich GitHub, ob es Probleme beim Zusammenführen des Zweigs mit dem Hauptprojekt gibt.\nWenn es keine Probleme gibt, setzt GitHub ein Häkchen und zeigt \"Able to merge\" an.\nDu kannst dann einen Titel und einen Kommentar zu Deiner Pull-Anfrage hinzufügen, um den Besitzer des Repositorys darüber zu informieren, was Du getan hast.\nSobald Du einen Kommentar und einen Titel eingegeben hast, kannst Du auf \"Create a pull request\" klicken.\nWenn Du dies getan hast, wird eine Benachrichtigung an den Besitzer des Repositorys gesendet, dass Deine Änderungen zur Überprüfung bereit sind.\n\nNachdem Du Deine Anfrage abgeschickt hast, kann der Besitzer des GitHub-Projekts auf die Seite des Projekts gehen und auf den Reiter \"Pull Requests\" klicken.\nAuf dieser Seite wird eine Liste von Pull Requests angezeigt, aus der der Eigentümer Deine Anfrage auswählen kann.\nSobald der Besitzer auf der Pull Request Seite angekommen ist, sieht er eine Schaltfläche mit der Aufschrift \"Merge pull request\" (ähnlich der Abbildung unten).\n\n![](https://docs.github.com/assets/images/help/pull_requests/merge_box/pr-reviews-in-merge-box.png){width=\"50%\" height=\"50%\"}\n\nSobald der Eigentümer auf die grüne Schaltfläche klickt, wird er erneut gefragt, ob er die Änderung vornehmen möchte.\nWenn er erneut auf den Button klickt, wird die Änderung mit dem Hauptzweig zusammengeführt und er sieht etwas wie das folgende Bild...\n\n![](https://uoftcoders.github.io/rcourse/image/git_lesson/delete_branch.png){width=\"50%\" height=\"50%\"}\n\n### Ein Repository in einem Branch (oder Fork) aktualisieren\n\nWenn jemand in deiner Gruppe eine Änderung am Master Repo vornimmt, gibt es eine Möglichkeit, deinen Zweig zu aktualisieren, damit du die Änderungen sehen kannst.\nWenn eine Änderung vorgenommen wurde, wird auf der Webseite des verzweigten Repos angezeigt, dass Dein Repo \"1 Commit behind the Master\" ist.\nDas bedeutet, dass es 1 Änderung zwischen Deinem Fork und dem Main Repository gibt.\n\nWenn Du Deinen Fork aktualisieren möchtest, klicke auf die Schaltfläche \"Änderungen\".\nDu wirst dann auf eine Seite geleitet, die sagt \"main is up to date with all commits from branch. Versuchen Sie die Basis zu ändern\".\nKlicke auf \"Change base\".\nDann wird angezeigt, ob der Zweig zusammengeführt werden kann.\nWenn ja, klicke auf \"Create pull request\" (Titel und Kommentar für deine Anfrage) und erstelle eine Pull-Anfrage.\n\nNun klicke auf `Merge pull request`, dann auf `Confirm merge` und dein Zweig wird aktualisiert!\n\n### Gut zu wissen\n\n::: {.successbox .ginfo}\n-   Lerne wie man Branches mit dem Terminal erstellt: [Arbeiten mit Branches](https://thenewstack.io/dont-mess-with-the-master-working-with-branches-in-git-and-github/)\n-   Lerne die Verwendung von Pull Requests und Issues: [Issues und Pull Requests](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-branches)\n-   Lerne, wie man ein GitHub-Repository forkt: [Forken eines Repositories](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/fork-a-repo)\n:::\n\n### Selbst-Check\n\n::: {.infobox .test}\n[![](../images/git-1-self.png)](http://137.248.191.201:3838/de/git/#section-github---fork-und-branch)\n:::\n\n## Umgang mit Konflikten\n\n### Lernziele\n\nIn dieser Lektion lernst du\n\n-   Wie man mit Konflikten umgeht, die bei der Arbeit mit GitHub auftreten.\n-   Wie man mit Merge-Konflikten in GitHub umgeht.\n\n### Vorausetzungen\n\n-   Vertrautheit mit GitHub.\n-   Git installiert haben.\n-   Ein GitHub Konto haben.\n\n### Versionskonflikte was ist das?\n\nVersionskonflikte entstehen normalerweise, wenn verschiedene Versionen derselben Datei gleichzeitig in das Hauptrepository gepusht werden und die Priorisierung der Dateien nicht klar ist, also:\n\n-   wenn man sein persönliches GitHub-Repository aktualisiert (kein Pull vor Push).\n-   wenn mehrere Personen gleichzeitig an derselben Datei arbeiten\n\n### Push & Pull Konflikte\n\nEin typisches Szenario ist, dass Du etwas online auf GitHub bearbeitest und diese Änderung nicht gleichzeitig oder später in Rstudio synchronisierst.\nDer Konflikt könnte z.B.\nsein, dass Du einen Tippfehler in der README korrigierst und vergisst, die aktuelle Version im Rstudio-Projekt zu aktualisieren.\n\n::: {.successbox .ok}\nAlso **immer** `pull` vor `push`, sonst hat GitHub zwei verschiedene Änderungen gespeichert und weiß nicht, welche zu verwenden ist.\n:::\n\nEin komplizierterer Fall ist, wenn eine Änderung im Master-Repository gemacht wurde und jemand anderes in seinem Branch-/Fork-Repository ebenfalls eine Änderung an der gleichen Datei bzw.\ndem gleichen Inhalt gemacht hat.\nWenn eine Pull-Anfrage gestellt wird, wird GitHub den Unterschied bemerken.\nAuch hier kann es sich um etwas so Einfaches handeln, wie zwei Personen, die die README auf unterschiedliche Weise aktualisieren, was GitHub dazu veranlasst, ein Problem zu melden.\n\nIn diesem Fall muss manuell entschieden werden, welche Variante Vorrang hat.\n\nWenn Du eine Änderung an Deinem GitHub-Repository vornimmst und es gibt einen Konflikt, zeigt Dir R an, dass Deine Version dem Haupt-Repository voraus ist, wenn Du Deine Änderung überträgst.\nWenn Du dies siehst, bedeutet es, dass es einen Unterschied zwischen den Dateien gibt.\nWenn Du versuchst zu pullen und es gibt ein Problem, wird GitHub Dir etwas sagen wie\n\n::: warning\nUpdates wurden abgelehnt, weil das entfernte Repository Arbeit enthält, die Du lokal nicht hast.\nDies wird normalerweise durch ein anderes Repository verursacht, das auf die gleiche Referenz pusht.\n:::\n\nWenn diese Meldung erscheint, empfiehlt GitHub, dass Du einen Pull von Deinem Master-Repository durchführst, um den Fehler zu finden.\nHäufig erhältst Du die Fehlermeldung\n\n::: warning\nCONFLICT (content): Konflikt beim Zusammenführen in \\[Datei\\].\nAutomatisches Zusammenführen fehlgeschlagen; Konflikte lösen und dann das Ergebnis übertragen.\n:::\n\nDie Datei mit dem Problem wird dann in Ihrem RStudio geöffnet und zeigt den gefundenen Fehler an.\nEs wird angezeigt, welche Änderungen vorgenommen wurden und welche Unterschiede zum Hauptzweig bestehen (die Änderungen werden unter `<<<<<<< HEAD` angezeigt, der Inhalt des Hauptzweigs wird darunter angezeigt).\nDu musst den Fehler zwischen den beiden Versionen beheben, indem Du entweder das beibehältst, was GitHub bereits hat, oder indem Du Deine Änderung so anpasst, dass sie dem entspricht, was Du machen wolltest.\nWenn Du mit Deiner Änderung zufrieden bist, rufe das Terminal auf (es befindet sich in R, einem Tab über der Konsole).\nIm Terminal gibst Du `git add [Dateiname]` ein, drückst die Eingabetaste und gehst zurück zum Git-Tab oben rechts im RStudio-Fenster.\nWähle die Datei aus, in der der Fehler aufgetreten ist und überschreibe sie, um den Fehler zu beheben.\n\n### Merge Konflikte\n\nWenn mehrere Personen am selben GitHub-Repository arbeiten oder Du nur einen Zweig verwendest, besteht die Möglichkeit, dass ein **Merge-Konflikt** auftritt.\nZusammenführungskonflikte treten auf, wenn Änderungen am Haupt-Repository und an einem Zweig vorgenommen werden, die nicht übereinstimmen.\nSobald eine Pull-Anfrage gestellt wird, muss der Eigentümer des Projektarchivs die Änderungen manuell überprüfen, sie können dann nicht automatisch zusammengeführt werden.\n\nFolglich teilt GitHub Dir mit, dass es die Versionen nicht automatisch zusammenführen kann, aber es wird Dir trotzdem erlauben, die Pull-Anfrage zu stellen.\nWenn Du Dich entscheidest, die Pull-Anfrage zu senden, wird der Repo-Besitzer nicht in der Lage sein, auf den grünen `Merge` Button zu klicken, sondern er wird eine Meldung sehen, die besagt:\n\n::: warning\nDieser Zweig hat Konflikte, die gelöst werden müssen.\n:::\n\nRechts neben dieser Meldung befindet sich die Schaltfläche `Konflikte auflösen`.\n\nWenn du auf die Schaltfläche `Konflikte auflösen` klickst, wirst du zu einer Seite weitergeleitet, die ähnlich aussieht wie bei Push- oder Pull-Fehlernt.\nDu siehst die vorgeschlagenen Änderungen aus dem Zweig und Haupt-Repository.\nAn dieser Stelle können dann Änderungen durchgeführt werden und zuletzt mit `Als gelöst markieren` und anschließend `Merge bestätigen` erfolgreich für einen Merge bereitgestellt werden.\nZuletzt muss der Eigentümer auf `Merge Pull Request` und dann auf `Commit Merge` klicken, um die Änderung im Haupt-Repository zu vorzunehmen.\n\n### Gut zu wissen\n\n::: {.successbox .ginfo}\nWeitere Informationen über den Umgang mit Konflikten in GitHub findest Du hier:\n\n-   [Wie gehe ich mit Merge Konflikten um?](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts)\n:::\n\n### Selbst-Check\n\n::: {.infobox .test}\n[![](../images/git-1-self.png)](http://137.248.191.201:3838/de/git/#section-github---konflikte-l%C3%B6sen)\n:::\n\n## RStudio - All Inclusive\n\n### Lernziele\n\n-   Einsatz von GitHub direkt aus RStudio\n\n### Vorausetzungen\n\n-   Übung im Umgang mit GitHub und git\n\n### Existierendes GitHub Repo in R einbinden\n\nBevor du mit einem GitHub-Repository in RStudio arbeitest, stelle sicher, dass du ein GitHub-Repository hast, mit dem du arbeiten kannst.\n\nNachdem du das Repository erstellt hast, kannst du auf die grüne Schaltfläche klicken, um einen Link zu erhalten, mit dem du das Repository klonen kannst.\nUm es in R zu öffnen, öffne R und klicke auf den Würfel mit dem Pluszeichen, um ein neues Projekt zu erstellen, klicke auf Versionskontrolle und dann auf Git.\nNun fügt man die zuvor kopierte URL ein und erstellt das Projekt.\nJetzt hast du ein Projekt in R, das mit GitHub verbunden ist.\nNun kannst du neue Dateien erstellen und sie auf GitHub hochladen, damit andere sie sehen können.\n\n### Erklärung der Schaltflächen/Befehle\n\nOben rechts (je nach Konfiguration von RStudio) befinden sich die Reiter `Environment`, `History...` Wähle die Registerkarte `Git`, um die Git-Befehle zu sehen.\nIn diesem Bereich kannst Du entscheiden, welche Dateien hochgeladen/gelöscht, welche Änderungen übernommen, welche Dateien aus dem Haupt-Repository gezogen, welche Dateien in das Haupt-Repository geschoben werden sollen.\nDie vorgenommenen Änderungen werden hier überprüft und es können Branches erstellt oder geändert wrden.\nSehen wir uns nun an, was die einzelnen Befehle/Schaltflächen bewirken.\n\n-   `Diff` Wenn du auf Diff klickst, öffnet sich ein neues Fenster in R.\n    In diesem Fenster werden alle Dateien angezeigt, die sich geändert haben (im Vergleich zum Haupt-Repository) und auch die Änderungen, die du vorgenommen hast.\n    Du kannst dieses Fenster auch verwenden, um die Änderungen zu übertragen und aus dem Haupt-Repository herauszuziehen.\n\n-   `Commit` Die Verwendung von Commit im kleineren Fenster ist ähnlich wie im Diff-Fenster, Du musst nur die Dateien auswählen, die Du ins Repository übertragen möchtest und dann die Änderungen committen.\n\n-   `Pull` Pull ist ziemlich selbsterklärend, es zieht Dateien aus dem GitHub Repository.\n    Es ist wichtig, Dateien vor dem Pushen zu ziehen, um mögliche Konflikte mit überlappenden Dateien zu vermeiden.\n\n-   `Push` Push schiebt die Dateien in das GitHub Repository.\n    Diese Funktion wird verwendet, wenn Du die Änderungen an Deinen Dateien abgeschlossen hast und bereit bist, sie hochzuladen, damit andere die neuen Dateien ansehen können.\n    Die Reihenfolge beim Hochladen dieser Dateien wäre: Änderungen übertragen, aus dem Repository ziehen und dann in das Repository pushen.\n\n-   `History` Das nächste Symbol ist eine kleine Uhr, die die Historie Deiner Arbeit darstellt.\n    Sie zeigt die bisherigen Übertragungen und was bei jeder Übertragung geändert wurde.\n\n-   `Revert, Ignore und Shell` Diese Befehle findest Du in einem Dropdown-Menü, nachdem Du auf das Zahnrad neben der Uhr geklickt hast.\n    Mit Revert kannst Du alle Änderungen rückgängig machen, mit Ignore kannst Du einen Gitignore einrichten (nützlich, um Dateien zu blockieren, die Du nicht hochladen willst) und mit Shell kannst Du Dein Terminal öffnen und dort Git-Befehle ausführen.\n\n-   `Branches` Das nächste Symbol steht für Zweige.\n    Wenn Du auf dieses Symbol klickst, wirst Du gefragt, ob Du einen neuen Zweig erstellen möchtest.\n    Wie Du im Modul Zweige des Toolkits gelernt hast, sind Zweige nützlich, um Änderungen zu testen, ohne dass sie sich auf den Hauptzweig auswirken, falls ein Fehler auftritt.\n    Du kannst das Dropdown-Menü rechts neben dem Zweigsymbol verwenden, um zwischen den Zweigen zu wechseln.\n\n-   `Terminal (optional)` Du kannst diese GitHub-Befehle mit den RStudio-Befehlen ausführen, aber du kannst auch das Terminal in R verwenden, um das gleiche zu tun.\n    Alle GitHub-Befehle sind in der Form \"git \\_\\_\\_\\_\\_\" und Du kannst sie finden, indem Du \"git\" in Dein Terminal eingibst.\n    Dies macht dasselbe wie das R-Panel, aber wenn Du mit dem Schreiben von Git-Befehlen in einem Terminal vertrauter bist, funktioniert es vielleicht besser für Dich.\n\n#### Ein R-Projekt in ein GitHub-Repositorium verwandeln\n\nManchmal arbeitet man an einem Projekt in R und hat vergessen, ein GitHub-Repository dafür zu erstellen.\nIn diesem Fall kann Ihnen das Paket `usethis` helfen, ein Repo aus RStudio heraus zu erstellen.\nMit der Funktion `usethis::use_git` kann das aktuelle Projekt in ein GitHub Repo umgewandelt werden, so dass die Dateien hochgeladen werden können.\n- Wenn Du diese Funktion zum ersten Mal ausführst, wirst Du wahrscheinlich einen Fehler erhalten, da Du dafür ein Token von GitHub benötigst.\nNach dem Aufruf von `usethis::browse_github_token` öffnet sich ein neues Fenster, in dem man aufgefordert wird, sich in seinen GitHub-Account einzuloggen.\nNach dem Einloggen können Berechtigungen mit dem Token gesetzt und kopiert werden.\nSobald du den Token kopiert hast, rufe `usethis::edit_r_environment()` auf und speichere deinen Token als \"GITHUB_PAT=token\".\n\nSobald dein Token gesetzt und dein R zurückgesetzt ist, kannst du `use_git` benutzen und es wird Dich fragen, ob es okay ist, deine Dateien zu GitHub zu committen.\nWenn du diese Frage bejahst, wirst du aufgefordert, dein RStudio-Fenster neu zu starten, um das Git-Fenster zu öffnen und deine Dateien hochzuladen.\nNach dem Neustart von RStudio die geänderten Dateien (falls vorhanden) mit dem Diff-Button hochladen.\nBenutze nun `usethis::use_github`, um deine Dateien in ein GitHub-Repository zu senden.\n- `use_github` wird Dich fragen, ob Du einen ssh Schlüssel hast, was Du wahrscheinlich nicht hast, also wähle `https`.\nDann wird man gefragt, ob Titel und Beschreibung akzeptabel sind.\nWenn ja, kannst Du mit Ja antworten und die Datei auf GitHub hochladen!\n\n### Gut zu wissen\n\n::: {.successbox .ginfo}\nWeitere Informationen zur Verwendung von GitHub in RStudio findest Du unter folgendem Link:\n\n-   Der Blog-Eintrag [GitHub & Rstudio](https://resources.github.com/whitepapers/github-and-rstudio/) zeigt, wie man Git in RStudio benutzt und geht dabei besonders auf die Terminal-Befehle ein.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kL6L2MNqPHg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n:::\n\n### Selbst-Check\n\n::: {.infobox .test}\n[![](../images/git-3-self.png)](http://137.248.191.201:3838/de/git/#section-github---workflow-in-rstudio)\n:::\n\n## Danksagung\n\nDas Tutorial basiert auf dem [DoSStoolkit](https://dosstoolkit.com/).\nSowohl die Inhalte als auch die Self Assessments basieren dem Modul [Git outta here](https://dosstoolkit.com/#git-outta-here) von [Mariam Walaa & Matthew Wankiewicz](https://dosstoolkit.com/#contributors).\nDie Übersetzungen und Veränderungen vom Autor dieser Seite.\n\nDas Originalmodul kann mit dem folgenden R-Befehl aufgerufen werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearnr::run_tutorial(\"git_outta_here\", package = \"DoSStoolkit\") \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}